type Foo {
 id: String! @id
 value: Int!
}


enum Role {
  ADMIN
  USER
}

interface ReadOnly
  @auth(
    add: { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
    delete: { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
    update: { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
  ) {
  _placeholder: String
}

interface Cuid {
    id: String! @id
}

type Token implements ReadOnly @withSubscription {
    ticker: String! @id
    name: String!
    nav: Float!
    baseMultiplier: Float!
}

type Stake implements Cuid & ReadOnly {
    token: Token!
    amount: Float!
    committedStakingPeriod: Int!

    owner: Account!
}

type Balance implements Cuid & ReadOnly {
  token: Token!
  amount: Float!

  owner: Account!
}

enum AccountType {
    User
    StakingContract
    TreasuryContract
}

type Account implements ReadOnly @withSubscription {
    address: String! @id

    type: AccountType! @search(by: [hash])

    stakes: [Stake!]! @hasInverse(field: owner)
    balances: [Balance!]! @hasInverse(field: owner)
}

type Transaction implements ReadOnly {
  blockNumber: Int!
  timeStamp: DateTime!
  hash: String! @id
  nonce: Int!
  blockHash: String!
  from: String!
  contractAddress: String!
  to: String!
  value: String!
  tokenName: String!
  tokenSymbol: String!
  tokenDecimal: Int!
  transactionIndex: Int!
  gas: Int!
  gasPrice: String!
  gasUsed: Int!
  cumulativeGasUsed: Int!
  input: String!
  confirmations: Int!
}

type AppState implements Cuid & ReadOnly {
    transactionIds: [String!]! @search(by: [hash])
    totalStakingPower: Float!
    medianStakingPower: Float!
    maxStakingPower: Float!
}

# Dgraph.Authorization {"VerificationKey":"${APP_SECRET}","Header":"X-Auth","Namespace":"https://invictusicap.com/jwt/claims","Algo":"HS256"}
