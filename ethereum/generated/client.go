// Code generated by github.com/maaft/gqlgenc, DO NOT EDIT.

package invictusicap

import (
	"context"
	"net/http"

	"github.com/maaft/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	GetFoo               *Foo                        "json:\"getFoo\" graphql:\"getFoo\""
	QueryFoo             []*Foo                      "json:\"queryFoo\" graphql:\"queryFoo\""
	AggregateFoo         *FooAggregateResult         "json:\"aggregateFoo\" graphql:\"aggregateFoo\""
	QueryReadOnly        []ReadOnly                  "json:\"queryReadOnly\" graphql:\"queryReadOnly\""
	AggregateReadOnly    *ReadOnlyAggregateResult    "json:\"aggregateReadOnly\" graphql:\"aggregateReadOnly\""
	QueryCuid            []Cuid                      "json:\"queryCuid\" graphql:\"queryCuid\""
	AggregateCuid        *CuidAggregateResult        "json:\"aggregateCuid\" graphql:\"aggregateCuid\""
	GetToken             *Token                      "json:\"getToken\" graphql:\"getToken\""
	QueryToken           []*Token                    "json:\"queryToken\" graphql:\"queryToken\""
	AggregateToken       *TokenAggregateResult       "json:\"aggregateToken\" graphql:\"aggregateToken\""
	GetStake             *Stake                      "json:\"getStake\" graphql:\"getStake\""
	QueryStake           []*Stake                    "json:\"queryStake\" graphql:\"queryStake\""
	AggregateStake       *StakeAggregateResult       "json:\"aggregateStake\" graphql:\"aggregateStake\""
	GetBalance           *Balance                    "json:\"getBalance\" graphql:\"getBalance\""
	QueryBalance         []*Balance                  "json:\"queryBalance\" graphql:\"queryBalance\""
	AggregateBalance     *BalanceAggregateResult     "json:\"aggregateBalance\" graphql:\"aggregateBalance\""
	GetAccount           *Account                    "json:\"getAccount\" graphql:\"getAccount\""
	QueryAccount         []*Account                  "json:\"queryAccount\" graphql:\"queryAccount\""
	AggregateAccount     *AccountAggregateResult     "json:\"aggregateAccount\" graphql:\"aggregateAccount\""
	GetTransaction       *Transaction                "json:\"getTransaction\" graphql:\"getTransaction\""
	QueryTransaction     []*Transaction              "json:\"queryTransaction\" graphql:\"queryTransaction\""
	AggregateTransaction *TransactionAggregateResult "json:\"aggregateTransaction\" graphql:\"aggregateTransaction\""
	GetAppState          *AppState                   "json:\"getAppState\" graphql:\"getAppState\""
	QueryAppState        []*AppState                 "json:\"queryAppState\" graphql:\"queryAppState\""
	AggregateAppState    *AppStateAggregateResult    "json:\"aggregateAppState\" graphql:\"aggregateAppState\""
}

type Mutation struct {
	AddFoo            *AddFooPayload            "json:\"addFoo\" graphql:\"addFoo\""
	UpdateFoo         *UpdateFooPayload         "json:\"updateFoo\" graphql:\"updateFoo\""
	DeleteFoo         *DeleteFooPayload         "json:\"deleteFoo\" graphql:\"deleteFoo\""
	UpdateReadOnly    *UpdateReadOnlyPayload    "json:\"updateReadOnly\" graphql:\"updateReadOnly\""
	DeleteReadOnly    *DeleteReadOnlyPayload    "json:\"deleteReadOnly\" graphql:\"deleteReadOnly\""
	DeleteCuid        *DeleteCuidPayload        "json:\"deleteCuid\" graphql:\"deleteCuid\""
	AddToken          *AddTokenPayload          "json:\"addToken\" graphql:\"addToken\""
	UpdateToken       *UpdateTokenPayload       "json:\"updateToken\" graphql:\"updateToken\""
	DeleteToken       *DeleteTokenPayload       "json:\"deleteToken\" graphql:\"deleteToken\""
	AddStake          *AddStakePayload          "json:\"addStake\" graphql:\"addStake\""
	UpdateStake       *UpdateStakePayload       "json:\"updateStake\" graphql:\"updateStake\""
	DeleteStake       *DeleteStakePayload       "json:\"deleteStake\" graphql:\"deleteStake\""
	AddBalance        *AddBalancePayload        "json:\"addBalance\" graphql:\"addBalance\""
	UpdateBalance     *UpdateBalancePayload     "json:\"updateBalance\" graphql:\"updateBalance\""
	DeleteBalance     *DeleteBalancePayload     "json:\"deleteBalance\" graphql:\"deleteBalance\""
	AddAccount        *AddAccountPayload        "json:\"addAccount\" graphql:\"addAccount\""
	UpdateAccount     *UpdateAccountPayload     "json:\"updateAccount\" graphql:\"updateAccount\""
	DeleteAccount     *DeleteAccountPayload     "json:\"deleteAccount\" graphql:\"deleteAccount\""
	AddTransaction    *AddTransactionPayload    "json:\"addTransaction\" graphql:\"addTransaction\""
	UpdateTransaction *UpdateTransactionPayload "json:\"updateTransaction\" graphql:\"updateTransaction\""
	DeleteTransaction *DeleteTransactionPayload "json:\"deleteTransaction\" graphql:\"deleteTransaction\""
	AddAppState       *AddAppStatePayload       "json:\"addAppState\" graphql:\"addAppState\""
	UpdateAppState    *UpdateAppStatePayload    "json:\"updateAppState\" graphql:\"updateAppState\""
	DeleteAppState    *DeleteAppStatePayload    "json:\"deleteAppState\" graphql:\"deleteAppState\""
}
type QueryAccount struct {
	QueryAccount []*struct {
		Type     AccountType "json:\"type\" graphql:\"type\""
		Address  string      "json:\"address\" graphql:\"address\""
		Balances []*struct {
			ID    string "json:\"id\" graphql:\"id\""
			Token struct {
				Name           string  "json:\"name\" graphql:\"name\""
				Ticker         string  "json:\"ticker\" graphql:\"ticker\""
				Nav            float64 "json:\"nav\" graphql:\"nav\""
				BaseMultiplier float64 "json:\"baseMultiplier\" graphql:\"baseMultiplier\""
			} "json:\"token\" graphql:\"token\""
			Amount float64 "json:\"amount\" graphql:\"amount\""
		} "json:\"balances\" graphql:\"balances\""
		Stakes []*struct {
			ID    string "json:\"id\" graphql:\"id\""
			Token struct {
				Name           string  "json:\"name\" graphql:\"name\""
				Ticker         string  "json:\"ticker\" graphql:\"ticker\""
				Nav            float64 "json:\"nav\" graphql:\"nav\""
				BaseMultiplier float64 "json:\"baseMultiplier\" graphql:\"baseMultiplier\""
			} "json:\"token\" graphql:\"token\""
			CommittedStakingPeriod int     "json:\"committedStakingPeriod\" graphql:\"committedStakingPeriod\""
			Amount                 float64 "json:\"amount\" graphql:\"amount\""
		} "json:\"stakes\" graphql:\"stakes\""
	} "json:\"queryAccount\" graphql:\"queryAccount\""
}
type GetAccount struct {
	GetAccount *struct {
		Type     AccountType "json:\"type\" graphql:\"type\""
		Address  string      "json:\"address\" graphql:\"address\""
		Balances []*struct {
			ID    string "json:\"id\" graphql:\"id\""
			Token struct {
				Name           string  "json:\"name\" graphql:\"name\""
				Ticker         string  "json:\"ticker\" graphql:\"ticker\""
				Nav            float64 "json:\"nav\" graphql:\"nav\""
				BaseMultiplier float64 "json:\"baseMultiplier\" graphql:\"baseMultiplier\""
			} "json:\"token\" graphql:\"token\""
			Amount float64 "json:\"amount\" graphql:\"amount\""
		} "json:\"balances\" graphql:\"balances\""
		Stakes []*struct {
			ID    string "json:\"id\" graphql:\"id\""
			Token struct {
				Name           string  "json:\"name\" graphql:\"name\""
				Ticker         string  "json:\"ticker\" graphql:\"ticker\""
				Nav            float64 "json:\"nav\" graphql:\"nav\""
				BaseMultiplier float64 "json:\"baseMultiplier\" graphql:\"baseMultiplier\""
			} "json:\"token\" graphql:\"token\""
			CommittedStakingPeriod int     "json:\"committedStakingPeriod\" graphql:\"committedStakingPeriod\""
			Amount                 float64 "json:\"amount\" graphql:\"amount\""
		} "json:\"stakes\" graphql:\"stakes\""
	} "json:\"getAccount\" graphql:\"getAccount\""
}
type SubscribeAccount struct {
	QueryAccount []*struct {
		Type     AccountType "json:\"type\" graphql:\"type\""
		Address  string      "json:\"address\" graphql:\"address\""
		Balances []*struct {
			ID    string "json:\"id\" graphql:\"id\""
			Token struct {
				Name           string  "json:\"name\" graphql:\"name\""
				Ticker         string  "json:\"ticker\" graphql:\"ticker\""
				Nav            float64 "json:\"nav\" graphql:\"nav\""
				BaseMultiplier float64 "json:\"baseMultiplier\" graphql:\"baseMultiplier\""
			} "json:\"token\" graphql:\"token\""
			Amount float64 "json:\"amount\" graphql:\"amount\""
		} "json:\"balances\" graphql:\"balances\""
		Stakes []*struct {
			ID    string "json:\"id\" graphql:\"id\""
			Token struct {
				Name           string  "json:\"name\" graphql:\"name\""
				Ticker         string  "json:\"ticker\" graphql:\"ticker\""
				Nav            float64 "json:\"nav\" graphql:\"nav\""
				BaseMultiplier float64 "json:\"baseMultiplier\" graphql:\"baseMultiplier\""
			} "json:\"token\" graphql:\"token\""
			CommittedStakingPeriod int     "json:\"committedStakingPeriod\" graphql:\"committedStakingPeriod\""
			Amount                 float64 "json:\"amount\" graphql:\"amount\""
		} "json:\"stakes\" graphql:\"stakes\""
	} "json:\"queryAccount\" graphql:\"queryAccount\""
}
type QueryToken struct {
	QueryToken []*struct {
		Ticker         string  "json:\"ticker\" graphql:\"ticker\""
		Nav            float64 "json:\"nav\" graphql:\"nav\""
		Name           string  "json:\"name\" graphql:\"name\""
		BaseMultiplier float64 "json:\"baseMultiplier\" graphql:\"baseMultiplier\""
	} "json:\"queryToken\" graphql:\"queryToken\""
}
type SubscribeToken struct {
	QueryToken []*struct {
		Ticker string  "json:\"ticker\" graphql:\"ticker\""
		Nav    float64 "json:\"nav\" graphql:\"nav\""
		Name   string  "json:\"name\" graphql:\"name\""
	} "json:\"queryToken\" graphql:\"queryToken\""
}
type GetAppState struct {
	QueryAppState []*struct {
		TransactionIds []string "json:\"transactionIds\" graphql:\"transactionIds\""
	} "json:\"queryAppState\" graphql:\"queryAppState\""
}
type SetEthPriceClientPayload struct {
	UpdateAppState *struct {
		NumUids *int "json:\"numUids\" graphql:\"numUids\""
	} "json:\"updateAppState\" graphql:\"updateAppState\""
}
type GetEthPrice struct {
	QueryAppState []*struct {
		EthPrice float64 "json:\"ethPrice\" graphql:\"ethPrice\""
	} "json:\"queryAppState\" graphql:\"queryAppState\""
}
type GetStatistics struct {
	QueryAppState []*struct {
		TotalStakingPower  float64 "json:\"totalStakingPower\" graphql:\"totalStakingPower\""
		MedianStakingPower float64 "json:\"medianStakingPower\" graphql:\"medianStakingPower\""
		MaxStakingPower    float64 "json:\"maxStakingPower\" graphql:\"maxStakingPower\""
	} "json:\"queryAppState\" graphql:\"queryAppState\""
}
type AddAccountClientPayload struct {
	AddAccount *struct {
		Account []*struct {
			Address string "json:\"address\" graphql:\"address\""
		} "json:\"account\" graphql:\"account\""
	} "json:\"addAccount\" graphql:\"addAccount\""
}
type AddTransactionClientPayload struct {
	AddTransaction *struct {
		Transaction []*struct {
			Hash string "json:\"hash\" graphql:\"hash\""
		} "json:\"transaction\" graphql:\"transaction\""
	} "json:\"addTransaction\" graphql:\"addTransaction\""
}
type QueryTransaction struct {
	QueryTransaction []*struct {
		BlockNumber       int    "json:\"blockNumber\" graphql:\"blockNumber\""
		TimeStamp         string "json:\"timeStamp\" graphql:\"timeStamp\""
		Hash              string "json:\"hash\" graphql:\"hash\""
		Nonce             int    "json:\"nonce\" graphql:\"nonce\""
		BlockHash         string "json:\"blockHash\" graphql:\"blockHash\""
		From              string "json:\"from\" graphql:\"from\""
		ContractAddress   string "json:\"contractAddress\" graphql:\"contractAddress\""
		To                string "json:\"to\" graphql:\"to\""
		Value             string "json:\"value\" graphql:\"value\""
		TokenName         string "json:\"tokenName\" graphql:\"tokenName\""
		TokenSymbol       string "json:\"tokenSymbol\" graphql:\"tokenSymbol\""
		TokenDecimal      int    "json:\"tokenDecimal\" graphql:\"tokenDecimal\""
		TransactionIndex  int    "json:\"transactionIndex\" graphql:\"transactionIndex\""
		Gas               int    "json:\"gas\" graphql:\"gas\""
		GasPrice          string "json:\"gasPrice\" graphql:\"gasPrice\""
		GasUsed           int    "json:\"gasUsed\" graphql:\"gasUsed\""
		CumulativeGasUsed int    "json:\"cumulativeGasUsed\" graphql:\"cumulativeGasUsed\""
		Input             string "json:\"input\" graphql:\"input\""
		Confirmations     int    "json:\"confirmations\" graphql:\"confirmations\""
	} "json:\"queryTransaction\" graphql:\"queryTransaction\""
}
type AddAppStateClientPayload struct {
	AddAppState *struct {
		AppState []*struct {
			Placeholder *string "json:\"_placeholder\" graphql:\"_placeholder\""
		} "json:\"appState\" graphql:\"appState\""
	} "json:\"addAppState\" graphql:\"addAppState\""
}
type AddTokenClientPayload struct {
	AddToken *struct {
		Token []*struct {
			Ticker string "json:\"ticker\" graphql:\"ticker\""
		} "json:\"token\" graphql:\"token\""
	} "json:\"addToken\" graphql:\"addToken\""
}
type AddBalanceClientPayload struct {
	AddBalance *struct {
		Balance []*struct {
			ID string "json:\"id\" graphql:\"id\""
		} "json:\"balance\" graphql:\"balance\""
	} "json:\"addBalance\" graphql:\"addBalance\""
}
type AddStakeClientPayload struct {
	AddStake *struct {
		Stake []*struct {
			ID string "json:\"id\" graphql:\"id\""
		} "json:\"stake\" graphql:\"stake\""
	} "json:\"addStake\" graphql:\"addStake\""
}
type UpdateAppStateClientPayload struct {
	UpdateAppState *struct {
		NumUids *int "json:\"numUids\" graphql:\"numUids\""
	} "json:\"updateAppState\" graphql:\"updateAppState\""
}
type UpdateTokenClientPayload struct {
	UpdateToken *struct {
		Token []*struct {
			Ticker string  "json:\"ticker\" graphql:\"ticker\""
			Nav    float64 "json:\"nav\" graphql:\"nav\""
		} "json:\"token\" graphql:\"token\""
	} "json:\"updateToken\" graphql:\"updateToken\""
}
type UpdateBalanceClientPayload struct {
	UpdateBalance *struct {
		NumUids *int "json:\"numUids\" graphql:\"numUids\""
	} "json:\"updateBalance\" graphql:\"updateBalance\""
}
type UpdateStakeClientPayload struct {
	UpdateStake *struct {
		NumUids *int "json:\"numUids\" graphql:\"numUids\""
	} "json:\"updateStake\" graphql:\"updateStake\""
}
type DeleteStakeClientPayload struct {
	DeleteStake *struct {
		Msg *string "json:\"msg\" graphql:\"msg\""
	} "json:\"deleteStake\" graphql:\"deleteStake\""
}
type UpdateAccountClientPayload struct {
	UpdateAccount *struct {
		NumUids *int "json:\"numUids\" graphql:\"numUids\""
	} "json:\"updateAccount\" graphql:\"updateAccount\""
}
type GetTreasuryAccounts struct {
	QueryAccount []*struct {
		Address  string "json:\"address\" graphql:\"address\""
		Balances []*struct {
			Token struct {
				Nav float64 "json:\"nav\" graphql:\"nav\""
			} "json:\"token\" graphql:\"token\""
			Amount float64 "json:\"amount\" graphql:\"amount\""
		} "json:\"balances\" graphql:\"balances\""
	} "json:\"queryAccount\" graphql:\"queryAccount\""
}

const QueryAccountQuery = `query queryAccount {
	queryAccount {
		type
		address
		balances {
			id
			token {
				name
				ticker
				nav
				baseMultiplier
			}
			amount
		}
		stakes {
			id
			token {
				name
				ticker
				nav
				baseMultiplier
			}
			committedStakingPeriod
			amount
		}
	}
}
`

func (c *Client) QueryAccount(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*QueryAccount, error) {
	vars := map[string]interface{}{}

	var res QueryAccount
	if err := c.Client.Post(ctx, QueryAccountQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetAccountQuery = `query getAccount ($address: String!) {
	getAccount(address: $address) {
		type
		address
		balances {
			id
			token {
				name
				ticker
				nav
				baseMultiplier
			}
			amount
		}
		stakes {
			id
			token {
				name
				ticker
				nav
				baseMultiplier
			}
			committedStakingPeriod
			amount
		}
	}
}
`

func (c *Client) GetAccount(ctx context.Context, address string, httpRequestOptions ...client.HTTPRequestOption) (*GetAccount, error) {
	vars := map[string]interface{}{
		"address": address,
	}

	var res GetAccount
	if err := c.Client.Post(ctx, GetAccountQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const SubscribeAccountQuery = `subscription subscribeAccount {
	queryAccount {
		type
		address
		balances {
			id
			token {
				name
				ticker
				nav
				baseMultiplier
			}
			amount
		}
		stakes {
			id
			token {
				name
				ticker
				nav
				baseMultiplier
			}
			committedStakingPeriod
			amount
		}
	}
}
`

func (c *Client) SubscribeAccount(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*SubscribeAccount, error) {
	vars := map[string]interface{}{}

	var res SubscribeAccount
	if err := c.Client.Post(ctx, SubscribeAccountQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const QueryTokenQuery = `query queryToken {
	queryToken {
		ticker
		nav
		name
		baseMultiplier
	}
}
`

func (c *Client) QueryToken(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*QueryToken, error) {
	vars := map[string]interface{}{}

	var res QueryToken
	if err := c.Client.Post(ctx, QueryTokenQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const SubscribeTokenQuery = `subscription subscribeToken {
	queryToken {
		ticker
		nav
		name
	}
}
`

func (c *Client) SubscribeToken(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*SubscribeToken, error) {
	vars := map[string]interface{}{}

	var res SubscribeToken
	if err := c.Client.Post(ctx, SubscribeTokenQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetAppStateQuery = `query getAppState {
	queryAppState {
		transactionIds
	}
}
`

func (c *Client) GetAppState(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*GetAppState, error) {
	vars := map[string]interface{}{}

	var res GetAppState
	if err := c.Client.Post(ctx, GetAppStateQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const SetEthPriceQuery = `mutation setEthPrice ($price: Float!) {
	updateAppState(input: {filter:{has:maxStakingPower},set:{ethPrice:$price}}) {
		numUids
	}
}
`

func (c *Client) SetEthPrice(ctx context.Context, price float64, httpRequestOptions ...client.HTTPRequestOption) (*SetEthPriceClientPayload, error) {
	vars := map[string]interface{}{
		"price": price,
	}

	var res SetEthPriceClientPayload
	if err := c.Client.Post(ctx, SetEthPriceQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetEthPriceQuery = `query getEthPrice {
	queryAppState {
		ethPrice
	}
}
`

func (c *Client) GetEthPrice(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*GetEthPrice, error) {
	vars := map[string]interface{}{}

	var res GetEthPrice
	if err := c.Client.Post(ctx, GetEthPriceQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetStatisticsQuery = `query getStatistics {
	queryAppState {
		totalStakingPower
		medianStakingPower
		maxStakingPower
	}
}
`

func (c *Client) GetStatistics(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*GetStatistics, error) {
	vars := map[string]interface{}{}

	var res GetStatistics
	if err := c.Client.Post(ctx, GetStatisticsQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AddAccountQuery = `mutation addAccount ($input: AddAccountInput!) {
	addAccount(input: [$input]) {
		account {
			address
		}
	}
}
`

func (c *Client) AddAccount(ctx context.Context, input AddAccountInput, httpRequestOptions ...client.HTTPRequestOption) (*AddAccountClientPayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddAccountClientPayload
	if err := c.Client.Post(ctx, AddAccountQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AddTransactionQuery = `mutation addTransaction ($input: AddTransactionInput!) {
	addTransaction(input: [$input]) {
		transaction {
			hash
		}
	}
}
`

func (c *Client) AddTransaction(ctx context.Context, input AddTransactionInput, httpRequestOptions ...client.HTTPRequestOption) (*AddTransactionClientPayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddTransactionClientPayload
	if err := c.Client.Post(ctx, AddTransactionQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const QueryTransactionQuery = `query queryTransaction {
	queryTransaction {
		blockNumber
		timeStamp
		hash
		nonce
		blockHash
		from
		contractAddress
		to
		value
		tokenName
		tokenSymbol
		tokenDecimal
		transactionIndex
		gas
		gasPrice
		gasUsed
		cumulativeGasUsed
		input
		confirmations
	}
}
`

func (c *Client) QueryTransaction(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*QueryTransaction, error) {
	vars := map[string]interface{}{}

	var res QueryTransaction
	if err := c.Client.Post(ctx, QueryTransactionQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AddAppStateQuery = `mutation addAppState ($input: AddAppStateInput!) {
	addAppState(input: [$input]) {
		appState {
			_placeholder
		}
	}
}
`

func (c *Client) AddAppState(ctx context.Context, input AddAppStateInput, httpRequestOptions ...client.HTTPRequestOption) (*AddAppStateClientPayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddAppStateClientPayload
	if err := c.Client.Post(ctx, AddAppStateQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AddTokenQuery = `mutation addToken ($input: AddTokenInput!) {
	addToken(input: [$input]) {
		token {
			ticker
		}
	}
}
`

func (c *Client) AddToken(ctx context.Context, input AddTokenInput, httpRequestOptions ...client.HTTPRequestOption) (*AddTokenClientPayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddTokenClientPayload
	if err := c.Client.Post(ctx, AddTokenQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AddBalanceQuery = `mutation addBalance ($input: AddBalanceInput!) {
	addBalance(input: [$input]) {
		balance {
			id
		}
	}
}
`

func (c *Client) AddBalance(ctx context.Context, input AddBalanceInput, httpRequestOptions ...client.HTTPRequestOption) (*AddBalanceClientPayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddBalanceClientPayload
	if err := c.Client.Post(ctx, AddBalanceQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AddStakeQuery = `mutation addStake ($input: AddStakeInput!) {
	addStake(input: [$input]) {
		stake {
			id
		}
	}
}
`

func (c *Client) AddStake(ctx context.Context, input AddStakeInput, httpRequestOptions ...client.HTTPRequestOption) (*AddStakeClientPayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddStakeClientPayload
	if err := c.Client.Post(ctx, AddStakeQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateAppStateQuery = `mutation updateAppState ($set: AppStatePatch!) {
	updateAppState(input: {filter:{has:id},set:$set}) {
		numUids
	}
}
`

func (c *Client) UpdateAppState(ctx context.Context, set AppStatePatch, httpRequestOptions ...client.HTTPRequestOption) (*UpdateAppStateClientPayload, error) {
	vars := map[string]interface{}{
		"set": set,
	}

	var res UpdateAppStateClientPayload
	if err := c.Client.Post(ctx, UpdateAppStateQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateTokenQuery = `mutation updateToken ($filter: TokenFilter!, $set: TokenPatch!) {
	updateToken(input: {filter:$filter,set:$set}) {
		token {
			ticker
			nav
		}
	}
}
`

func (c *Client) UpdateToken(ctx context.Context, filter TokenFilter, set TokenPatch, httpRequestOptions ...client.HTTPRequestOption) (*UpdateTokenClientPayload, error) {
	vars := map[string]interface{}{
		"filter": filter,
		"set":    set,
	}

	var res UpdateTokenClientPayload
	if err := c.Client.Post(ctx, UpdateTokenQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateBalanceQuery = `mutation updateBalance ($balanceId: String!, $set: BalancePatch!) {
	updateBalance(input: {filter:{id:{eq:$balanceId}},set:$set}) {
		numUids
	}
}
`

func (c *Client) UpdateBalance(ctx context.Context, balanceID string, set BalancePatch, httpRequestOptions ...client.HTTPRequestOption) (*UpdateBalanceClientPayload, error) {
	vars := map[string]interface{}{
		"balanceId": balanceID,
		"set":       set,
	}

	var res UpdateBalanceClientPayload
	if err := c.Client.Post(ctx, UpdateBalanceQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateStakeQuery = `mutation updateStake ($filter: StakeFilter!, $set: StakePatch!) {
	updateStake(input: {filter:$filter,set:$set}) {
		numUids
	}
}
`

func (c *Client) UpdateStake(ctx context.Context, filter StakeFilter, set StakePatch, httpRequestOptions ...client.HTTPRequestOption) (*UpdateStakeClientPayload, error) {
	vars := map[string]interface{}{
		"filter": filter,
		"set":    set,
	}

	var res UpdateStakeClientPayload
	if err := c.Client.Post(ctx, UpdateStakeQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const DeleteStakeQuery = `mutation deleteStake ($id: String!) {
	deleteStake(filter: {id:{eq:$id}}) {
		msg
	}
}
`

func (c *Client) DeleteStake(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*DeleteStakeClientPayload, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res DeleteStakeClientPayload
	if err := c.Client.Post(ctx, DeleteStakeQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateAccountQuery = `mutation updateAccount ($filter: AccountFilter!, $set: AccountPatch!) {
	updateAccount(input: {filter:$filter,set:$set}) {
		numUids
	}
}
`

func (c *Client) UpdateAccount(ctx context.Context, filter AccountFilter, set AccountPatch, httpRequestOptions ...client.HTTPRequestOption) (*UpdateAccountClientPayload, error) {
	vars := map[string]interface{}{
		"filter": filter,
		"set":    set,
	}

	var res UpdateAccountClientPayload
	if err := c.Client.Post(ctx, UpdateAccountQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetTreasuryAccountsQuery = `query getTreasuryAccounts {
	queryAccount(filter: {type:{eq:TreasuryContract}}) {
		address
		balances {
			token {
				nav
			}
			amount
		}
	}
}
`

func (c *Client) GetTreasuryAccounts(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*GetTreasuryAccounts, error) {
	vars := map[string]interface{}{}

	var res GetTreasuryAccounts
	if err := c.Client.Post(ctx, GetTreasuryAccountsQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
